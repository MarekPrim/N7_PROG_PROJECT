--- [1] ---
Interpréter un programme écrit en langage intermédiaire conforme à la première partie.
On définira un module qui décrit des actions permettant d’interpréter chaque type d’instruction

Que doit-on faire ?
Grâce à un premier module "interpréteur" on dois lire du code en langage sources et effectuer les actions correspondante.



**** RAFFINAGE source -> intermédiaire ****

R0: Traduire un code source en langage intermédiaire.

R1: Comment "Traduire un code source en langage intermédiaire" ?
-- Traiter le bloc de déclaration des variables.
-- Traiter le bloc principal du programme

R2: Comment "Traiter le bloc de déclaration des variables" ?
-- Trouver le début de la déclaration du programme.
-- Trouver et traiter les variables
R2: Comment "Traiter le bloc principal du programme" ?
-- Trouver le début du programme.
-- Identifier l'action effectuée par chaque ligne et traiter les différents cas.
-- Trouver la fin du programme.

R3: Comment "Trouver et traiter les variables" ?
-- Identifier les différentes variables
-- Les associer au bon type de données
R3: Comment "Identifier l'action effectuée par chaque ligne et traiter les différents cas" ?
-- Traiter les affectations
-- Traiter les "Tant que"




*************************************************************************


   R0: Traduire un code source en langage intermédiaire.

   R1: Comment "Traduire un code source en langage intermédiaire" ?
   -- R1.1: Traiter le bloc de déclaration des variables.
         |-- R2.1: Trouver le début de la déclaration du programme.
         |-- R2.2: Trouver les variables
         |   |-- R3.1: Traiter la création des variable.


   -- R1.2: Traiter le bloc principal du programme
      |-- R2.1: Trouver le début du programme.
      |   |-- R3.1: Identifier l'action effectuée par chaque ligne et traiter les différents cas.
      |   |   |-- R5.1: Traiter affectation
      |   |   |-- R5.2: Traiter Tant que
      |-- R2.1: Trouver la fin du programme.


**** RAFFINAGE intermédiaire -> exécution ****

R0: Interpréter un code en langage intermédiaire.

R1: Comment "Interpréter un code en langage intermédiaire" ?
-- R1.1: Traiter le bloc de code "avant début".
   |-- R2.1: Localiser la partie du code souhaitée.
   |   | -- R3.1: Trouver la ligne Commençant par "Programme", quitter R1.1 lorsque l'on trouve la ligne "Début".
   |   |
   |-- R2.2: Traiter le code ligne par ligne.
   |   |-- R3.1: Pour chaque ligne créer un tableau.
   |   |   |-- R4.1: Séparer les variables
   |   |   |    #Les variables seront renseignées dans un tableau à partir de la case 1
   |   |
   |   |   |-- R4.2: Interpréter le type de variable
   |   |   |   #On mettra le type de la variable en case 0 du tableau


-- R1.2: Traiter le bloc de code "entre début et fin"
   |-- R2.1: Localiser la partie du code souhaitée.
   |   |-- R3.1: Sauter la ligne début, s'arrếter lorsque l'on trouve "Fin".
   |
   |-- R2.2: Traiter le code ligne par ligne.
   |   |-- R3.1: Mettre chaque éléments d'une ligne (séparés par un espace) dans un tableau.
   |   |
   |   |-- R3.2: Parcourir le tableau pour trouver l'action à effectuer dans cette ligne.
   |   |
   |   |-- R3.3: Effectuer l'action


   #####SAVE#####
   **** RAFFINAGE source -> intermédiaire ****

   R0: Traduire un code source en langage intermédiaire.

   R1: Comment "Traduire un code source en langage intermédiaire" ?
   -- R1.1: Traiter le bloc de code avant "Début" (ligne par ligne).
         |-- R2.1: Trouver la ligne Commençant par "Programme".
         |   //Créer ligne [recopier ligne]
         |-- R2.2: Trouver les variables
         |   |-- R3.1: Pour chaque ligne, si la ligne commence par "--"(commentaire), passer à la ligne suivante.
         |   |-- R3.2: Sinon enregistrer la première chaîne de caractères dans un "String"
         |   |-- R3.3: Identifier le type de la variable (le "string" enregistré)
         |   |-- R3.4: Stocker la variable dans un tableau dédié au type de la variable
         |-- R2.1: Lorsque "Début"
         |   //Créer ligne "Début"


   -- R1.2: Traiter le bloc de code "entre début et fin"
      |-- R2.1: Traiter le code ligne par ligne.
      |   |-- R3.1: Enregistrer la ligne dans un tableau global (qui commence à 1 et est incrémenter à chaque ligne)
      |   |   |-- R4.1: Identifier l'action et traiter les différents cas
      |   |   |   |-- R5.1: Si affectation insérer la ligne dans le tableau
      |   |   |   |-- R5.2: Si "Tant que"
      |   |   |   |   |-- R6.1: Identifier l'opérateur (<, >, =, >=, <=)
      |   |   |   |   |   //SI opérateur est > ou < ou =
      |   |   |   |   |   //  Créer ligne "T1 <-- opérateur"
      |   |   |   |   |   //  L1 <-- [ligne actuelle]
      |   |   |   |   |   //  SI opérateur suivant est =
      |   |   |   |   |   //    Créer ligne "T2 <-- ="
      |   |   |   |   |   //    Créer ligne "T3 <-- T1 ou T2"
      |   |   |   |   |   //    Créer ligne "IF T3 GOTO [ligne actuelle + 2]"
      |   |   |   |   |   //    Créer ligne "GOTO " #A REMPLIR#
      |   |   |   |   |   //    L2 <- [ligne actuelle]
      |   |   |   |   |   //  SINON
      |   |   |   |   |   //    Créer ligne "IF T1 GOTO [ligne actuelle + 2]"
      |   |   |   |   |   //    Créer ligne "GOTO " #A REMPLIR#
      |   |   |   |   |   //    L2 <- [ligne actuelle]
      |   |   |   |   |   //  Fin SI
      |   |   |   |   |   //Fin SI
      |   |   |   |   |
      |   |   |   |   |-- R6.2: Retourner dans R4.1
      |   |   |   |
      |   |   |   |-- R5.3: Si "Fin Tant que"
      |   |   |   |   //Créer ligne "GOTO [L1]"
      |   |   |   |   //Dans le tableau, à l'indice L2, ajouter à la ligne "[ligne actuelle + 1]"
      |   |   |   |   Retourner dans R4.1
      |   |   |   |
      |   |   |   |-- R5.3: Si "Fin"
      |   |   |   |   //Créer ligne "Fin"
